@page "/deletestudent"
@inject HttpClient HttpClient
@inject IJSRuntime JSRuntime
@inject ILogger<Delete> Logger
@using Newtonsoft.Json;
@inject NavigationManager NavigationManager

<h1>Delete Student</h1>

<EditForm Model="@student" OnValidSubmit="ShowDeleteConfirmationModal">
    <div class="form-group">
        <label for="studentId">Student ID:</label>
        <InputText id="studentId" @bind-Value="student.Student_ID" class="form-control" required />
    </div>

    <button type="submit" class="btn btn-danger">Delete Student</button>
</EditForm>


<!-- Delete Confirmation Modal -->
@if (showDeleteConfirmationModal)
{
    <div class="modal-content1">
        <span class="close" @onclick="CloseModals">&times;</span> <!-- Close button with cross mark -->
        <h2>Confirm Delete</h2>
        <p>Do you want to delete this student?</p>
        <button @onclick="DeleteStudent" class="delete-btn">Delete Permanently</button>
        <button @onclick="MoveToBin" class="move-to-bin-btn">Move to Bin</button>
        <button @onclick="Cancel" class="cancel-btn">Cancel</button>
    </div>

}

<div class="popup @(successPopupVisible ? "open-popup" : "")" @ref="successPopup">
    <h2 id="successMessage">@successMessage</h2>
    <button type="button" @onclick="CloseSuccessPopup">Ok</button>
</div>

<!-- Modal for Failure -->
<div class="popup @(failurePopupVisible ? "open-popup" : "")" @ref="failurePopup">
    <h2 id="failureMessage">@failureMessage</h2>
    <button type="button" @onclick="CloseFailurePopup">Ok</button>
</div>



@code {
    private Student student = new Student();
    private bool successPopupVisible = false;
    private string successMessage = "";

    private bool failurePopupVisible = false;
    private string failureMessage = "";

    private ElementReference successPopup;
    private ElementReference failurePopup;
    private bool showDeleteConfirmationModal = false;


    private void ShowDeleteConfirmationModal()
    {
        showDeleteConfirmationModal = true;
    }


    // DELETE STUDENT PERMANENTLY

    private async Task DeleteStudent()
    {
        try
        {

            Logger.LogInformation($"Request received to delete a student: {JsonConvert.SerializeObject(student.Student_ID)}");

            var response = await HttpClient.DeleteAsync($"/api/Student/{student.Student_ID}");

            if (response.IsSuccessStatusCode)
            {
                // Student deleted successfully, show a success message
                successMessage = "Student Deleted Successfully";
                successPopupVisible = true;
            }
            else if (response.StatusCode == System.Net.HttpStatusCode.BadRequest)
            {
                failureMessage = "Error in deleting student";
                failurePopupVisible = true;
            }
            else
            {
                // Handle error cases, show an error message
                string errorMessage = await response.Content.ReadAsStringAsync();
                Logger.LogError($"Failed to add student. Status code: {response.StatusCode}. Error message: {errorMessage}");
                failureMessage = "Error in deleting student";
                failurePopupVisible = true; 
            }
        }
        catch (HttpRequestException ex)
        {
            failureMessage = "Error in deleting student";
            failurePopupVisible = true;
        }
        catch (Exception ex)
        {
            failureMessage = "Error in deleting student";
            failurePopupVisible = true;
        }
    }



    // MOVE TO BIN

   

    private async Task MoveToBin()
    {
        Logger.LogInformation($"Request received to move student to bin: {JsonConvert.SerializeObject(student.Student_ID)}");

        var response = await HttpClient.PatchAsync($"/api/Student/softdelete/{student.Student_ID}", null);

        successMessage = "Student Moved to bin SUccessfully";
        successPopupVisible = true;
    }


  // --------------------------   CANCEL DELETE  ------------------------------------

    private void Cancel()
    {
        // Close the delete confirmation modal without taking any action
        showDeleteConfirmationModal = false;
    }


  
 private void CloseSuccessPopup()
    {
        successPopupVisible = false;
    }

    private void CloseFailurePopup()
    {
        failurePopupVisible = false;
    }

    private void CloseModals()

    {
        successPopupVisible = false;
        failurePopupVisible = false;

        
    }
}




@code {
    private bool show = false;

    [Parameter]
    public RenderFragment ChildContent { get; set; }

    public void Show()
    {
        show = true;
        StateHasChanged();
    }

    public async Task ShowAsync()
    {
        Show();
        await Task.Delay(1000); // Display modal for 3 seconds (adjust as needed)
        CloseModal();
    }

    private void CloseModal()
    {
        show = false;
        StateHasChanged();
    }
}
